function Content = Process_AtendHeader(filein, fileout)
% NewContent = Process_AtendHeader(filein) % rerurn the new content
% Process_AtendHeader(filein, fileout) % write NewContent in the fileout
% Process_AtendHeader(fileinout, '') % write NewContent in the fileinout
%
% Decription:
% Replace atended Bounding Box and Pages of the content in the encapsulated
% postscript (EPS) file by a non atended one.
% This transformation is required to make the EPS file suitable for
% EPS2PDF conversion due to a limitation of the later command
% See BUG described in http://dev.man-online.org/man1/epstopdf/
% 
% Author: <brunoluong@xxx.xxx>
%
% Note: 
% 1. Attended EPS file is generated by MATLAB R2014B by "print -epsc ..."
% commands, which is no longer run with EPS2PDF
% 2. File without attended BB will not be modified
%
% See also: PRINT, SAVEAS

% Read filein
fid = fopen(filein,'r');
Content = fread(fid, 'char=>char');
fclose(fid);

Content = Content.'; % Make it a row vector

% Find the ends of the lines
Content(Content== 13) = [];
if Content(end) ~= 10
    Content(end+1) = 10;
end
CRidx = [0 find(Content==10)];
% Split in cell vectors of line
lgt = diff(CRidx);
Lines = mat2cell(Content,1,lgt);

idxTrailer = FindCmd(Lines, '%%Trailer');
if ~isempty(idxTrailer)
    iBB = FindCmd(Lines, '%%BoundingBox');
    iPages = FindCmd(Lines, '%%Pages');
    if length(iBB) ~= 2 || ...
       length(iPages) ~= 2 || ...
       isempty(strfind(Lines{iBB(1)},'(atend)')) || ...
       isempty(strfind(Lines{iPages(1)},'(atend)'))
        error('Corrupted EPS file');
    end
    idxEOF = FindCmd(Lines, '%%EOF');
    if isempty(idxEOF)
        idxEOF = length(Lines) + 1;
    end
    % Swap the (atend) with the values find later
    Lines(iBB([1 2])) = Lines(iBB([2 1]));
    Lines(iPages([1 2])) = Lines(iPages([2 1]));
    % Remove the trailer section
    Lines(idxTrailer:idxEOF-1) = [];
    % Re-assemble the lines
    Content = cat(2, Lines{:});
end

if nargin >= 2
    if isempty(fileout)
        fileout = filein;
    end
    fid = fopen(fileout,'w');
    fwrite(fid, Content);
    fclose(fid);
end

end % Process_AtendHeader

%% 
function idx = FindCmd(Lines, cmd)
% Return the index of the Lines started with the string CMD
idx = find(strncmp(Lines, cmd, length(cmd)));
end % Process_AtendHeader